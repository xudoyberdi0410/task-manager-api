"""
API –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∑–∞–¥–∞—á–∞–º–∏.
"""

from fastapi import APIRouter, Depends, Query, status
from pydantic import BaseModel, Field
from sqlalchemy.orm import Session

from src.auth.jwt import get_current_user
from src.database import get_db
from src.models.task import PriorityEnum, StatusEnum
from src.schemas.task import TaskCreate, TaskFilter, TaskList, TaskResponse, TaskUpdate
from src.schemas.user import UserInDB
from src.services.task_service import TaskService

router = APIRouter(prefix="/tasks", tags=["tasks"])


def get_task_service(db: Session = Depends(get_db)) -> TaskService:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–¥–∞—á"""
    return TaskService(db)


@router.get(
    "/",
    response_model=TaskList,
    summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á",
    description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏",
    response_description="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏",
)
async def get_tasks(
    skip: int = Query(0, ge=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞"),
    limit: int = Query(10, ge=1, le=100, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π"),
    status: StatusEnum | None = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É"),
    priority: PriorityEnum | None = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"),
    category_id: int | None = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
    search: str | None = Query(None, description="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é"),
    current_user: UserInDB = Depends(get_current_user),
    task_service: TaskService = Depends(get_task_service),
):
    """
    ## –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:
    - **–ü–∞–≥–∏–Ω–∞—Ü–∏—è**: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ skip –∏ limit
    - **–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è**: –ø–æ —Å—Ç–∞—Ç—É—Å—É, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    - **–ü–æ–∏—Å–∫**: –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é –∑–∞–¥–∞—á

    ### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - **skip**: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
    - **limit**: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (1-100, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
    - **status**: —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (todo, in_progress, done)
    - **priority**: —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (low, medium, high)
    - **category_id**: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    - **search**: —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–∏
    """
    filters = TaskFilter(
        status=status,
        priority=priority,
        category_id=category_id,
        search=search,
        due_date_from=None,
        due_date_to=None,
    )

    tasks, total = task_service.get_user_tasks(
        user_id=int(current_user.user_id), skip=skip, limit=limit, filters=filters
    )

    return TaskList(tasks=tasks, total=total, page=skip // limit + 1, per_page=limit)


@router.get(
    "/status/{status}",
    response_model=TaskList,
    summary="–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É",
    description="–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º",
    response_description="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º",
)
async def get_tasks_by_status(
    status: StatusEnum,
    skip: int = Query(0, ge=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞"),
    limit: int = Query(10, ge=1, le=100, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π"),
    current_user: UserInDB = Depends(get_current_user),
    task_service: TaskService = Depends(get_task_service),
):
    """
    ## –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º.

    ### –í–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:
    - **todo**: –∑–∞–¥–∞—á–∏ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é
    - **in_progress**: –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    - **done**: –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    """
    tasks, total = task_service.get_tasks_by_status(
        user_id=int(current_user.user_id), status=status, skip=skip, limit=limit
    )

    return TaskList(tasks=tasks, total=total, page=skip // limit + 1, per_page=limit)


@router.get(
    "/category/{category_id}",
    response_model=TaskList,
    summary="–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
    description="–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
    response_description="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
)
async def get_tasks_by_category(
    category_id: int,
    skip: int = Query(0, ge=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞"),
    limit: int = Query(10, ge=1, le=100, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π"),
    current_user: UserInDB = Depends(get_current_user),
    task_service: TaskService = Depends(get_task_service),
):
    """
    ## –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.

    ### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - **category_id**: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    tasks, total = task_service.get_tasks_by_category(
        user_id=int(current_user.user_id),
        category_id=category_id,
        skip=skip,
        limit=limit,
    )

    return TaskList(tasks=tasks, total=total, page=skip // limit + 1, per_page=limit)


@router.get(
    "/overdue",
    response_model=TaskList,
    summary="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏",
    description="–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    response_description="–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á",
)
async def get_overdue_tasks(
    skip: int = Query(0, ge=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞"),
    limit: int = Query(10, ge=1, le=100, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π"),
    current_user: UserInDB = Depends(get_current_user),
    task_service: TaskService = Depends(get_task_service),
):
    """
    ## –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (due_date)
    —É–∂–µ –ø—Ä–æ—à–µ–ª, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ —Ä–∞–≤–µ–Ω 'done'.
    """
    tasks, total = task_service.get_overdue_tasks(
        user_id=int(current_user.user_id), skip=skip, limit=limit
    )

    return TaskList(tasks=tasks, total=total, page=skip // limit + 1, per_page=limit)


@router.get(
    "/search",
    response_model=TaskList,
    summary="–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á",
    description="–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –ø–æ —Ç–µ–∫—Å—Ç—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–∏",
    response_description="–°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á",
)
async def search_tasks(
    q: str = Query(..., description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"),
    skip: int = Query(0, ge=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞"),
    limit: int = Query(10, ge=1, le=100, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π"),
    current_user: UserInDB = Depends(get_current_user),
    task_service: TaskService = Depends(get_task_service),
):
    """
    ## –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á

    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é –∑–∞–¥–∞—á.

    ### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - **q**: –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
    - **skip**: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
    - **limit**: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    """
    tasks, total = task_service.search_tasks(
        user_id=int(current_user.user_id), query=q, skip=skip, limit=limit
    )

    return TaskList(tasks=tasks, total=total, page=skip // limit + 1, per_page=limit)


@router.get(
    "/statistics",
    summary="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á",
    description="–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º",
    response_description="–û–±—ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∑–∞–¥–∞—á",
    tags=["üìä Statistics"],
)
async def get_task_statistics(
    current_user: UserInDB = Depends(get_current_user),
    task_service: TaskService = Depends(get_task_service),
):
    """
    ## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º:
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
    """
    return task_service.get_task_statistics(int(current_user.user_id))


# –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏


class BulkStatusUpdate(BaseModel):
    """–°—Ö–µ–º–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á"""

    task_ids: list[int] = Field(
        ...,
        description="–°–ø–∏—Å–æ–∫ ID –∑–∞–¥–∞—á –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
        examples=[[1, 2, 3], [42, 43]],
    )
    new_status: StatusEnum = Field(..., description="–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á")


class BulkTaskIds(BaseModel):
    """–°—Ö–µ–º–∞ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∑–∞–¥–∞—á–∞–º–∏"""

    task_ids: list[int] = Field(
        ..., description="–°–ø–∏—Å–æ–∫ ID –∑–∞–¥–∞—á", examples=[[1, 2, 3], [42, 43]]
    )


@router.patch(
    "/bulk/status",
    response_model=list[TaskResponse],
    summary="–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞",
    description="–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ",
    response_description="–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á",
)
async def bulk_update_status(
    bulk_data: BulkStatusUpdate,
    current_user: UserInDB = Depends(get_current_user),
    task_service: TaskService = Depends(get_task_service),
):
    """
    ## –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á

    –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Ç–∏–ø–∞ "–æ—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ".

    ### –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
    - **task_ids**: —Å–ø–∏—Å–æ–∫ ID –∑–∞–¥–∞—á –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    - **new_status**: –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    """
    tasks = task_service.bulk_update_status(
        bulk_data.task_ids, bulk_data.new_status, int(current_user.user_id)
    )
    return tasks


@router.delete(
    "/bulk",
    summary="–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á",
    description="–£–¥–∞–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ",
    response_description="–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è",
    status_code=status.HTTP_200_OK,
)
async def bulk_delete_tasks(
    bulk_data: BulkTaskIds,
    current_user: UserInDB = Depends(get_current_user),
    task_service: TaskService = Depends(get_task_service),
):
    """
    ## –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á

    –£–¥–∞–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
    –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞.

    ### –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
    - **task_ids**: —Å–ø–∏—Å–æ–∫ ID –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    """
    result = task_service.bulk_delete_tasks(
        bulk_data.task_ids, int(current_user.user_id)
    )
    return result


@router.get(
    "/{task_id}",
    response_model=TaskResponse,
    summary="–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É",
    description="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ",
    response_description="–î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏",
)
async def get_task(
    task_id: int,
    current_user: UserInDB = Depends(get_current_user),
    task_service: TaskService = Depends(get_task_service),
):
    """
    ## –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ ID

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –ø–æ –µ—ë —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.

    ### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - **task_id**: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏
    """
    task = task_service.get_task_by_id(task_id, int(current_user.user_id))
    return task


@router.post(
    "/",
    response_model=TaskResponse,
    status_code=status.HTTP_201_CREATED,
    summary="–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É",
    description="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    response_description="–°–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å –ø—Ä–∏—Å–≤–æ–µ–Ω–Ω—ã–º ID",
)
async def create_task(
    task_data: TaskCreate,
    current_user: UserInDB = Depends(get_current_user),
    task_service: TaskService = Depends(get_task_service),
):
    """
    ## –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É

    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    ### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:
    - **title**: –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏

    ### –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è:
    - **description**: –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    - **status**: —Å—Ç–∞—Ç—É—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "todo")
    - **priority**: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "medium")
    - **due_date**: —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    - **category_id**: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    task = task_service.create_task(task_data, int(current_user.user_id))
    return task


@router.put(
    "/{task_id}",
    response_model=TaskResponse,
    summary="–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É",
    description="–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏",
    response_description="–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞",
)
async def update_task(
    task_id: int,
    task_data: TaskUpdate,
    current_user: UserInDB = Depends(get_current_user),
    task_service: TaskService = Depends(get_task_service),
):
    """
    ## –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É

    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏. –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ª—é–±—ã–µ –ø–æ–ª—è.

    ### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - **task_id**: ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

    ### –ü–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:
    - **title**: –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    - **description**: –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    - **status**: –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    - **priority**: –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    - **due_date**: –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    - **category_id**: –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    """
    task = task_service.update_task(task_id, task_data, int(current_user.user_id))
    return task


@router.patch(
    "/{task_id}/status",
    response_model=TaskResponse,
    summary="–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏",
    description="–ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏",
    response_description="–ó–∞–¥–∞—á–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º",
)
async def update_task_status(
    task_id: int,
    new_status: StatusEnum,
    current_user: UserInDB = Depends(get_current_user),
    task_service: TaskService = Depends(get_task_service),
):
    """
    ## –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏

    –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π.

    ### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - **task_id**: ID –∑–∞–¥–∞—á–∏
    - **new_status**: –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å (todo, in_progress, done)
    """
    task = task_service.update_task_status(
        task_id, new_status, int(current_user.user_id)
    )
    return task


@router.delete(
    "/{task_id}",
    status_code=status.HTTP_204_NO_CONTENT,
    summary="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É",
    description="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É (–æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞)",
    response_description="–ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏",
)
async def delete_task(
    task_id: int,
    current_user: UserInDB = Depends(get_current_user),
    task_service: TaskService = Depends(get_task_service),
):
    """
    ## –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É

    –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞–≤—Å–µ–≥–¥–∞. –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞.

    ### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - **task_id**: ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    """
    task_service.delete_task(task_id, int(current_user.user_id))
