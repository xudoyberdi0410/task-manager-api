#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ Unicode —Å–∏–º–≤–æ–ª–∞–º–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —è–∑—ã–∫–æ–≤: —Ä—É—Å—Å–∫–æ–≥–æ, –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ, —è–ø–æ–Ω—Å–∫–æ–≥–æ, –∞—Ä–∞–±—Å–∫–æ–≥–æ,
—ç–º–æ–¥–∑–∏, —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ç.–¥.
"""
import os
import sys
import pytest
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.models.base import BaseModel
from src.models.category import Category
from src.models.user import User
from src.repositories.category_repository import CategoryRepository
from src.repositories.user_repository import UserRepository
from src.services.category_service import CategoryService
from src.schemas.category import CategoryCreate, CategoryUpdate

def detect_language(text):
    """–ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
    if any('\u4e00' <= char <= '\u9fff' for char in text):
        return "üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–π"
    elif any('\u3040' <= char <= '\u309f' for char in text) or any('\u30a0' <= char <= '\u30ff' for char in text):
        return "üáØüáµ –Ø–ø–æ–Ω—Å–∫–∏–π"  
    elif any('\u0600' <= char <= '\u06ff' for char in text):
        return "üá∏üá¶ –ê—Ä–∞–±—Å–∫–∏–π"
    elif any('\u0590' <= char <= '\u05ff' for char in text):
        return "üáÆüá± –ò–≤—Ä–∏—Ç"
    elif any('\uac00' <= char <= '\ud7af' for char in text):
        return "üá∞üá∑ –ö–æ—Ä–µ–π—Å–∫–∏–π"
    elif any('\u0900' <= char <= '\u097f' for char in text):
        return "üáÆüá≥ –•–∏–Ω–¥–∏"
    elif any('\u0e00' <= char <= '\u0e7f' for char in text):
        return "üáπüá≠ –¢–∞–π—Å–∫–∏–π"
    elif any('\u0370' <= char <= '\u03ff' for char in text):
        return "üá¨üá∑ –ì—Ä–µ—á–µ—Å–∫–∏–π"
    elif any('\u0400' <= char <= '\u04ff' for char in text):
        return "üá∑üá∫ –†—É—Å—Å–∫–∏–π"
    elif any(ord(char) > 0x1f600 for char in text):  # –î–∏–∞–ø–∞–∑–æ–Ω —ç–º–æ–¥–∑–∏
        return "üòä –≠–º–æ–¥–∑–∏"
    else:
        return "üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π"

def test_multilingual_category_names():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ Unicode —Å–∏–º–≤–æ–ª–∞–º–∏"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8
    engine = create_engine(
        "sqlite:///:memory:", 
        echo=True,
        connect_args={"check_same_thread": False}
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    BaseModel.metadata.create_all(bind=engine)
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    db = SessionLocal()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        encoding_result = db.execute(text("PRAGMA encoding")).fetchone()
        print(f"Database encoding: {encoding_result}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_repo = UserRepository(db)
        test_user = user_repo.create_user(
            email="test@example.com",
            username="testuser",
            password="password123"
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_service = CategoryService(db)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —è–∑—ã–∫–∏ –∏ —Å–∏–º–≤–æ–ª—ã
        multilingual_categories = [
            # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
            "–†–∞–±–æ—Ç–∞",
            "–õ–∏—á–Ω—ã–µ –¥–µ–ª–∞", 
            "–ü–æ–∫—É–ø–∫–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã",
            
            # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
            "Work Tasks",
            "Personal Projects",
            "Shopping List",
            
            # –ö–∏—Ç–∞–π—Å–∫–∏–π —è–∑—ã–∫ (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π)
            "Â∑•‰Ωú‰ªªÂä°",  # –†–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏
            "‰∏™‰∫∫È°πÁõÆ",  # –õ–∏—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã  
            "Ë¥≠Áâ©Ê∏ÖÂçï",  # –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
            "ÂÆ∂Â∫≠‰∫ãÂä°",  # –°–µ–º–µ–π–Ω—ã–µ –¥–µ–ª–∞
            
            # –Ø–ø–æ–Ω—Å–∫–∏–π —è–∑—ã–∫ (—Ö–∏—Ä–∞–≥–∞–Ω–∞, –∫–∞—Ç–∞–∫–∞–Ω–∞, –∫–∞–Ω–¥–∑–∏)
            "‰ªï‰∫ã„ÅÆ„Çø„Çπ„ÇØ",     # –†–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏
            "„Éó„É©„Ç§„Éô„Éº„Éà",     # –õ–∏—á–Ω–æ–µ (–∫–∞—Ç–∞–∫–∞–Ω–∞)
            "„Åã„ÅÑ„ÇÇ„ÅÆ",        # –ü–æ–∫—É–ø–∫–∏ (—Ö–∏—Ä–∞–≥–∞–Ω–∞)
            "ÂÆ∂Êóè„ÅÆÁî®‰∫ã",      # –°–µ–º–µ–π–Ω—ã–µ –¥–µ–ª–∞
            
            # –ê—Ä–∞–±—Å–∫–∏–π —è–∑—ã–∫ (–ø–∏—Å—å–º–æ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ)
            "ŸÖŸáÿßŸÖ ÿßŸÑÿπŸÖŸÑ",      # –†–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏
            "ÿßŸÑŸÖÿ¥ÿßÿ±Ÿäÿπ ÿßŸÑÿ¥ÿÆÿµŸäÿ©", # –õ–∏—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
            "ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ™ÿ≥ŸàŸÇ",    # –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
            
            # –ö–æ—Ä–µ–π—Å–∫–∏–π —è–∑—ã–∫ (—Ö–∞–Ω–≥—ã–ª—å)
            "ÏóÖÎ¨¥ ÏûëÏóÖ",        # –†–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏
            "Í∞úÏù∏ ÌîÑÎ°úÏ†ùÌä∏",     # –õ–∏—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
            "ÏáºÌïë Î™©Î°ù",        # –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
            
            # –•–∏–Ω–¥–∏ (–¥–µ–≤–∞–Ω–∞–≥–∞—Ä–∏)
            "‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§ï‡§æ‡§∞‡•ç‡§Ø",      # –†–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏
            "‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§™‡§∞‡§ø‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç", # –õ–∏—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
            
            # –¢–∞–π—Å–∫–∏–π —è–∑—ã–∫
            "‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥",     # –ó–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            "‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß",   # –õ–∏—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
            
            # –ì—Ä–µ—á–µ—Å–∫–∏–π —è–∑—ã–∫  
            "ŒïœÅŒ≥Œ±œÉŒØŒµœÇ",        # –†–∞–±–æ—Ç—ã
            "Œ†œÅŒøœÉœâœÄŒπŒ∫Œ¨ Œ≠œÅŒ≥Œ±",   # –õ–∏—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
            
            # –ò–≤—Ä–∏—Ç (–ø–∏—Å—å–º–æ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ)
            "◊û◊©◊ô◊û◊ï◊™ ◊¢◊ë◊ï◊ì◊î",     # –†–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏
            "◊§◊®◊ï◊ô◊ß◊ò◊ô◊ù ◊ê◊ô◊©◊ô◊ô◊ù",   # –õ–∏—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
        ]
        
        created_categories = []
        
        print("\n=== –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ ===")
        for title in multilingual_categories:
            category_data = CategoryCreate(title=title)
            category = category_service.create_category(category_data, test_user.user_id)
            
            if category:
                created_categories.append(category)
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
                lang_info = detect_language(title)
                print(f"‚úÖ {lang_info}: '{category.title}' (ID: {category.category_id})")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é: '{title}'")
        
        print(f"\n–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(created_categories)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        print("\n=== –ü–æ–ª—É—á–µ–Ω–∏–µ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===")
        all_categories, total = category_service.get_categories_by_user(test_user.user_id)
        
        for category in all_categories:
            lang_info = detect_language(category.title)
            print(f"üìÅ {lang_info}: {category.title} (ID: {category.category_id})")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–º–æ–¥–∑–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        print("\n=== –¢–µ—Å—Ç —ç–º–æ–¥–∑–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ ===")
        emoji_categories = [
            # –≠–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            "üíº –†–∞–±–æ—Ç–∞",
            "üè† –î–æ–º",
            "üõí –ü–æ–∫—É–ø–∫–∏", 
            "üéØ –¶–µ–ª–∏",
            "üí∞ –§–∏–Ω–∞–Ω—Å—ã",
            "üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
            "üìö –û–±—É—á–µ–Ω–∏–µ",
            "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
            "üè• –ó–¥–æ—Ä–æ–≤—å–µ",
            "üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ",
            
            # –¢–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏
            "üî•",
            "‚≠ê",
            "üöÄ",
            "üí°", 
            "üéâ",
            "üìù",
            "üéµ",
            "üåü",
            
            # –°–º–µ—à–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            "‚ù§Ô∏è –í–∞–∂–Ω–æ–µ",
            "‚ö° –°—Ä–æ—á–Ω–æ",
            "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", 
            "üé™ –°–æ–±—ã—Ç–∏—è",
            "üåà –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
            
            # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ –Ω–∞—É—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            "‚àë –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
            "œÄ –ù–∞—É–∫–∞", 
            "‚àû –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å",
            "Œ± –ê–ª—å—Ñ–∞ –ø—Ä–æ–µ–∫—Ç—ã",
            "Œ≤ –ë–µ—Ç–∞ —Ç–µ—Å—Ç—ã",
            
            # –†–∞–∑–Ω—ã–µ –≤–∏–¥—ã –∫–∞–≤—ã—á–µ–∫ –∏ —Å–∏–º–≤–æ–ª–æ–≤
            "¬´–í–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏¬ª",
            '"–ü—Ä–æ–µ–∫—Ç—ã"',
            "'–ò–¥–µ–∏'",
            "¬∞C –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
            "‚Ññ1 –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
            "¬© –ê–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞",
            "‚Ñ¢ –¢–æ—Ä–≥–æ–≤—ã–µ –º–∞—Ä–∫–∏",
        ]
        
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º {len(emoji_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —ç–º–æ–¥–∑–∏ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏...")
        emoji_created = []
        
        for title in emoji_categories:
            category_data = CategoryCreate(title=title)
            category = category_service.create_category(category_data, test_user.user_id)
            
            if category:
                emoji_created.append(category)
                lang_info = detect_language(title)
                print(f"‚úÖ {lang_info}: '{title}'")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å: '{title}'")
        
        print(f"\n–°–æ–∑–¥–∞–Ω–æ —ç–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(emoji_created)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        print("\n=== –¢–µ—Å—Ç –¥–ª–∏–Ω–Ω—ã—Ö –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π ===")
        long_multilingual = [
            "Very Long English Category Name With Multiple Words",
            "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏",
            "ÈùûÂ∏∏„Å´Èï∑„ÅÑÊó•Êú¨Ë™û„ÅÆ„Ç´„ÉÜ„Ç¥„É™ÂêçÂâç„Åß„Åô",  # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —è–ø–æ–Ω—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            "ËøôÊòØ‰∏Ä‰∏™ÈùûÂ∏∏ÈïøÁöÑ‰∏≠ÊñáÁ±ªÂà´ÂêçÁß∞",  # –≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –∫–∏—Ç–∞–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            "üìöüéØüíº –°–º–µ—à–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö",
        ]
        
        for title in long_multilingual:
            category_data = CategoryCreate(title=title)
            category = category_service.create_category(category_data, test_user.user_id)
            
            char_count = len(title)
            if category:
                lang_info = detect_language(title)
                print(f"‚úÖ {lang_info} ({char_count} —Å–∏–º–≤–æ–ª–æ–≤): '{title[:50]}{'...' if len(title) > 50 else ''}'")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ({char_count} —Å–∏–º–≤–æ–ª–æ–≤): '{title[:50]}{'...' if len(title) > 50 else ''}'")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        print("\n=== –ü–æ–∏—Å–∫ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π ===")
        search_terms = [
            # –ü–æ–∏—Å–∫ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
            ("Â∑•‰Ωú", "–∫–∏—Ç–∞–π—Å–∫–∏–π –ø–æ–∏—Å–∫"),
            ("‰ªï‰∫ã", "—è–ø–æ–Ω—Å–∫–∏–π –ø–æ–∏—Å–∫"), 
            ("üíº", "–ø–æ–∏—Å–∫ –ø–æ —ç–º–æ–¥–∑–∏"),
            ("Work", "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ–∏—Å–∫"),
            ("–†–∞–±–æ—Ç–∞", "—Ä—É—Å—Å–∫–∏–π –ø–æ–∏—Å–∫"),
        ]
        
        for term, description in search_terms:
            found_categories, _ = category_service.search_categories(term, test_user.user_id)
            if found_categories:
                print(f"üîç {description} '{term}': –Ω–∞–π–¥–µ–Ω–æ {len(found_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                for cat in found_categories[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(f"   ‚Üí {cat.title}")
            else:
                print(f"üîç {description} '{term}': –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        print("\n=== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===")
        if created_categories:
            category_to_update = created_categories[0]
            new_title = "üîÑ Updated ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ ‚Ä¢ Êõ¥Êñ∞„Åï„Çå„Åü"
            
            update_data = CategoryUpdate(title=new_title)
            updated_category = category_service.update_category(
                category_to_update.category_id,
                update_data,
                test_user.user_id
            )
            
            if updated_category:
                old_lang = detect_language(category_to_update.title)
                new_lang = detect_language(updated_category.title)
                print(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:")
                print(f"   –ë—ã–ª–æ: {old_lang} '{category_to_update.title}'")
                print(f"   –°—Ç–∞–ª–æ: {new_lang} '{updated_category.title}'")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
        print("\n=== –¢–µ—Å—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ ===")
        extreme_cases = [
            # –°–º–µ—à–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤ –≤ –æ–¥–Ω–æ–º –Ω–∞–∑–≤–∞–Ω–∏–∏
            "Work-—Ä–∞–±–æ—Ç–∞-‰ªï‰∫ã-üíº",
            "Ê∑∑ÂêàMixedÊ∑∑„Åú„ÇãŸÖÿÆÿ™ŸÑÿ∑",
            
            # –ß–∏—Å–ª–∞ –∏ —Å–∏–º–≤–æ–ª—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
            "123 Ÿ°Ÿ¢Ÿ£ ‰∏Ä‰∫å‰∏â Œ±Œ≤Œ≥",
            
            # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Å—å–º–∞ (LTR + RTL)
            "English ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ◊¢◊ë◊®◊ô◊™",
            
            # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            "üåç Global Project ‚Ä¢ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç ‚Ä¢ „Ç∞„É≠„Éº„Éê„É´„Éó„É≠„Ç∏„Çß„ÇØ„Éà ‚Ä¢ ÂÖ®ÁêÉÈ°πÁõÆ ‚Ä¢ ŸÖÿ¥ÿ±Ÿàÿπ ÿπÿßŸÑŸÖŸä",
            
            # –¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç–æ)
            "   ",
            "",
            
            # Unicode —Å–∏–º–≤–æ–ª—ã –≤—ã—Å–æ–∫–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
            "ùïåùïüùïöùïîùï†ùïïùïñ ùîºùï©ùï•ùï£ùïí",
            "üöÄüåüüí´‚≠êüåô",
        ]
        
        for title in extreme_cases:
            if not title.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: '{title}'")
                continue
                
            category_data = CategoryCreate(title=title)
            category = category_service.create_category(category_data, test_user.user_id)
            
            if category:
                lang_info = detect_language(title)
                print(f"‚úÖ {lang_info}: '{title}'")
            else:
                print(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: '{title}'")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n=== –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π ===")
        final_categories, total = category_service.get_categories_by_user(test_user.user_id)
        print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(final_categories)}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —è–∑—ã–∫–∞–º
        language_stats = {}
        for category in final_categories:
            lang = detect_language(category.title)
            if lang not in language_stats:
                language_stats[lang] = []
            language_stats[lang].append(category.title)
        
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —è–∑—ã–∫–∞–º:")
        for lang, titles in language_stats.items():
            print(f"   {lang}: {len(titles)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        print("\nüìù –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        for i, category in enumerate(final_categories, 1):
            lang_info = detect_language(category.title)
            print(f"{i:2d}. {lang_info}: {category.title}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        print("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Unicode ===")
        test_unicode_chars = [
            ("üåç", "–≠–º–æ–¥–∑–∏ –∑–µ–º–ª—è"),
            ("‰∏≠Êñá", "–ö–∏—Ç–∞–π—Å–∫–∏–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã"),
            ("„Å≤„Çâ„Åå„Å™", "–Ø–ø–æ–Ω—Å–∫–∞—è —Ö–∏—Ä–∞–≥–∞–Ω–∞"),
            ("ÿßŸÑÿπÿ±ÿ®Ÿäÿ©", "–ê—Ä–∞–±—Å–∫–∏–π —Ç–µ–∫—Å—Ç"),
            ("◊¢◊ë◊®◊ô◊™", "–ò–≤—Ä–∏—Ç"),
            ("–†—É—Å—Å–∫–∏–π", "–ö–∏—Ä–∏–ª–ª–∏—Ü–∞"),
            ("‚àë‚àûŒ±", "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã"),
        ]
        
        for char, description in test_unicode_chars:
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            test_title = f"Test {char} {description}"
            category_data = CategoryCreate(title=test_title)
            category = category_service.create_category(category_data, test_user.user_id)
            
            if category:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–º–≤–æ–ª—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                if category.title == test_title:
                    print(f"‚úÖ Unicode –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {description} - '{char}'")
                else:
                    print(f"‚ùå Unicode –∏—Å–∫–∞–∂—ë–Ω: –æ–∂–∏–¥–∞–ª–æ—Å—å '{test_title}', –ø–æ–ª—É—á–µ–Ω–æ '{category.title}'")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç –¥–ª—è: {description}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        db.close()


if __name__ == "__main__":
    print("üåç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
    success = test_multilingual_category_names()
    
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)
