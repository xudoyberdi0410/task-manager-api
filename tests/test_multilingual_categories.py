#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ Unicode —Å–∏–º–≤–æ–ª–∞–º–∏.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —è–∑—ã–∫–æ–≤: —Ä—É—Å—Å–∫–æ–≥–æ, –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ, —è–ø–æ–Ω—Å–∫–æ–≥–æ, –∞—Ä–∞–±—Å–∫–æ–≥–æ,
—ç–º–æ–¥–∑–∏, —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ç.–¥.
"""

import pytest

from src.repositories.user_repository import UserRepository
from src.schemas.category import CategoryCreate, CategoryUpdate
from src.services.category_service import CategoryService


def detect_language(text):
    """–ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
    if any("\u4e00" <= char <= "\u9fff" for char in text):
        return "üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–π"
    elif any("\u3040" <= char <= "\u309f" for char in text) or any(
        "\u30a0" <= char <= "\u30ff" for char in text
    ):
        return "üáØüáµ –Ø–ø–æ–Ω—Å–∫–∏–π"
    elif any("\u0600" <= char <= "\u06ff" for char in text):
        return "üá∏üá¶ –ê—Ä–∞–±—Å–∫–∏–π"
    elif any("\u0590" <= char <= "\u05ff" for char in text):
        return "üáÆüá± –ò–≤—Ä–∏—Ç"
    elif any("\uac00" <= char <= "\ud7af" for char in text):
        return "üá∞üá∑ –ö–æ—Ä–µ–π—Å–∫–∏–π"
    elif any("\u0900" <= char <= "\u097f" for char in text):
        return "üáÆüá≥ –•–∏–Ω–¥–∏"
    elif any("\u0e00" <= char <= "\u0e7f" for char in text):
        return "üáπüá≠ –¢–∞–π—Å–∫–∏–π"
    elif any("\u0370" <= char <= "\u03ff" for char in text):
        return "üá¨üá∑ –ì—Ä–µ—á–µ—Å–∫–∏–π"
    elif any("\u0400" <= char <= "\u04ff" for char in text):
        return "üá∑üá∫ –†—É—Å—Å–∫–∏–π"
    elif any(ord(char) > 0x1F600 for char in text):  # –î–∏–∞–ø–∞–∑–æ–Ω —ç–º–æ–¥–∑–∏
        return "üòä –≠–º–æ–¥–∑–∏"
    else:
        return "üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π"


@pytest.fixture
def category_service(db_session):
    return CategoryService(db_session)


@pytest.fixture
def multilingual_test_user(db_session):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    user_repo = UserRepository(db_session)
    return user_repo.create_user(
        email="multilingual@example.com",
        username="multilingual_user",
        password="password123",
    )


class TestMultilingualCategories:
    """–¢–µ—Å—Ç—ã –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""

    def test_basic_multilingual_categories(
        self, category_service, multilingual_test_user
    ):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö"""
        multilingual_categories = [
            # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
            "–†–∞–±–æ—Ç–∞",
            "–õ–∏—á–Ω—ã–µ –¥–µ–ª–∞",
            "–ü–æ–∫—É–ø–∫–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã",
            # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
            "Work Tasks",
            "Personal Projects",
            "Shopping List",
            # –ö–∏—Ç–∞–π—Å–∫–∏–π —è–∑—ã–∫ (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π)
            "Â∑•‰Ωú‰ªªÂä°",  # –†–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏
            "‰∏™‰∫∫È°πÁõÆ",  # –õ–∏—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
            "Ë¥≠Áâ©Ê∏ÖÂçï",  # –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
            "ÂÆ∂Â∫≠‰∫ãÂä°",  # –°–µ–º–µ–π–Ω—ã–µ –¥–µ–ª–∞
            # –Ø–ø–æ–Ω—Å–∫–∏–π —è–∑—ã–∫ (—Ö–∏—Ä–∞–≥–∞–Ω–∞, –∫–∞—Ç–∞–∫–∞–Ω–∞, –∫–∞–Ω–¥–∑–∏)
            "‰ªï‰∫ã„ÅÆ„Çø„Çπ„ÇØ",  # –†–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏
            "„Éó„É©„Ç§„Éô„Éº„Éà",  # –õ–∏—á–Ω–æ–µ (–∫–∞—Ç–∞–∫–∞–Ω–∞)
            "„Åã„ÅÑ„ÇÇ„ÅÆ",  # –ü–æ–∫—É–ø–∫–∏ (—Ö–∏—Ä–∞–≥–∞–Ω–∞)
            "ÂÆ∂Êóè„ÅÆÁî®‰∫ã",  # –°–µ–º–µ–π–Ω—ã–µ –¥–µ–ª–∞
            # –ê—Ä–∞–±—Å–∫–∏–π —è–∑—ã–∫ (–ø–∏—Å—å–º–æ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ)
            "ŸÖŸáÿßŸÖ ÿßŸÑÿπŸÖŸÑ",  # –†–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏
            "ÿßŸÑŸÖÿ¥ÿßÿ±Ÿäÿπ ÿßŸÑÿ¥ÿÆÿµŸäÿ©",  # –õ–∏—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
            "ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ™ÿ≥ŸàŸÇ",  # –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
            # –ö–æ—Ä–µ–π—Å–∫–∏–π —è–∑—ã–∫ (—Ö–∞–Ω–≥—ã–ª—å)
            "ÏóÖÎ¨¥ ÏûëÏóÖ",  # –†–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏
            "Í∞úÏù∏ ÌîÑÎ°úÏ†ùÌä∏",  # –õ–∏—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
            "ÏáºÌïë Î™©Î°ù",  # –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
        ]

        created_categories = []

        for title in multilingual_categories:
            category_data = CategoryCreate(title=title)
            category = category_service.create_category(
                category_data, multilingual_test_user.user_id
            )

            assert category is not None, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é: '{title}'"
            assert (
                category.title == title
            ), f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: –æ–∂–∏–¥–∞–ª–æ—Å—å '{title}', –ø–æ–ª—É—á–µ–Ω–æ '{category.title}'"
            created_categories.append(category)

        assert len(created_categories) == len(multilingual_categories)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        all_categories, total = category_service.get_categories_by_user(
            multilingual_test_user.user_id
        )
        assert len(all_categories) == len(multilingual_categories)
        assert total == len(multilingual_categories)

    def test_emoji_categories(self, category_service, multilingual_test_user):
        """–¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —ç–º–æ–¥–∑–∏"""
        emoji_categories = [
            # –≠–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            "üíº –†–∞–±–æ—Ç–∞",
            "üè† –î–æ–º",
            "üõí –ü–æ–∫—É–ø–∫–∏",
            "üéØ –¶–µ–ª–∏",
            "üí∞ –§–∏–Ω–∞–Ω—Å—ã",
            # –¢–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏
            "üî•",
            "‚≠ê",
            "üöÄ",
            "üí°",
            "üéâ",
            # –°–º–µ—à–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            "‚ù§Ô∏è –í–∞–∂–Ω–æ–µ",
            "‚ö° –°—Ä–æ—á–Ω–æ",
            "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
        ]

        created_categories = []

        for title in emoji_categories:
            category_data = CategoryCreate(title=title)
            category = category_service.create_category(
                category_data, multilingual_test_user.user_id
            )

            assert (
                category is not None
            ), f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —ç–º–æ–¥–∑–∏: '{title}'"
            assert (
                category.title == title
            ), f"–≠–º–æ–¥–∑–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å: –æ–∂–∏–¥–∞–ª–æ—Å—å '{title}', –ø–æ–ª—É—á–µ–Ω–æ '{category.title}'"
            created_categories.append(category)

        assert len(created_categories) == len(emoji_categories)

    def test_special_symbols_categories(self, category_service, multilingual_test_user):
        """–¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏"""
        special_categories = [
            # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ –Ω–∞—É—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            "‚àë –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
            "œÄ –ù–∞—É–∫–∞",
            "‚àû –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å",
            "Œ± –ê–ª—å—Ñ–∞ –ø—Ä–æ–µ–∫—Ç—ã",
            "Œ≤ –ë–µ—Ç–∞ —Ç–µ—Å—Ç—ã",
            # –†–∞–∑–Ω—ã–µ –≤–∏–¥—ã –∫–∞–≤—ã—á–µ–∫ –∏ —Å–∏–º–≤–æ–ª–æ–≤
            "¬´–í–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏¬ª",
            '"–ü—Ä–æ–µ–∫—Ç—ã"',
            "'–ò–¥–µ–∏'",
            "¬∞C –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
            "‚Ññ1 –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
            "¬© –ê–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞",
            "‚Ñ¢ –¢–æ—Ä–≥–æ–≤—ã–µ –º–∞—Ä–∫–∏",
        ]

        for title in special_categories:
            category_data = CategoryCreate(title=title)
            category = category_service.create_category(
                category_data, multilingual_test_user.user_id
            )

            assert (
                category is not None
            ), f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏: '{title}'"
            assert (
                category.title == title
            ), f"–°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å: –æ–∂–∏–¥–∞–ª–æ—Å—å '{title}', –ø–æ–ª—É—á–µ–Ω–æ '{category.title}'"

    def test_mixed_language_categories(self, category_service, multilingual_test_user):
        """–¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —è–∑—ã–∫–∞–º–∏"""
        mixed_categories = [
            # –°–º–µ—à–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤ –≤ –æ–¥–Ω–æ–º –Ω–∞–∑–≤–∞–Ω–∏–∏
            "Work-—Ä–∞–±–æ—Ç–∞-‰ªï‰∫ã-üíº",
            "Ê∑∑ÂêàMixedÊ∑∑„Åú„ÇãŸÖÿÆÿ™ŸÑÿ∑",
            # –ß–∏—Å–ª–∞ –∏ —Å–∏–º–≤–æ–ª—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
            "123 Ÿ°Ÿ¢Ÿ£ ‰∏Ä‰∫å‰∏â Œ±Œ≤Œ≥",
            # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Å—å–º–∞ (LTR + RTL)
            "English ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ◊¢◊ë◊®◊ô◊™",
            # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            "üåç Global Project ‚Ä¢ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç ‚Ä¢ „Ç∞„É≠„Éº„Éê„É´„Éó„É≠„Ç∏„Çß„ÇØ„Éà ‚Ä¢ ÂÖ®ÁêÉÈ°πÁõÆ ‚Ä¢ ŸÖÿ¥ÿ±Ÿàÿπ ÿπÿßŸÑŸÖŸä",
        ]

        for title in mixed_categories:
            category_data = CategoryCreate(title=title)
            category = category_service.create_category(
                category_data, multilingual_test_user.user_id
            )

            assert (
                category is not None
            ), f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–º–µ—à–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: '{title}'"
            assert (
                category.title == title
            ), f"–°–º–µ—à–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: –æ–∂–∏–¥–∞–ª–æ—Å—å '{title}', –ø–æ–ª—É—á–µ–Ω–æ '{category.title}'"

    def test_unicode_high_order_characters(
        self, category_service, multilingual_test_user
    ):
        """–¢–µ—Å—Ç Unicode —Å–∏–º–≤–æ–ª–æ–≤ –≤—ã—Å–æ–∫–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞"""
        unicode_categories = [
            # Unicode —Å–∏–º–≤–æ–ª—ã –≤—ã—Å–æ–∫–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
            "ùïåùïüùïöùïîùï†ùïïùïñ ùîºùï©ùï•ùï£ùïí",
            "üöÄüåüüí´‚≠êüåô",
        ]

        for title in unicode_categories:
            category_data = CategoryCreate(title=title)
            category = category_service.create_category(
                category_data, multilingual_test_user.user_id
            )

            assert (
                category is not None
            ), f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Unicode –∫–∞—Ç–µ–≥–æ—Ä–∏—é: '{title}'"
            assert (
                category.title == title
            ), f"Unicode —Å–∏–º–≤–æ–ª—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å: –æ–∂–∏–¥–∞–ª–æ—Å—å '{title}', –ø–æ–ª—É—á–µ–Ω–æ '{category.title}'"

    def test_multilingual_search(self, category_service, multilingual_test_user):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        test_categories = [
            "Â∑•‰Ωú‰ªªÂä°",  # –ö–∏—Ç–∞–π—Å–∫–∏–π
            "‰ªï‰∫ã„ÅÆ„Çø„Çπ„ÇØ",  # –Ø–ø–æ–Ω—Å–∫–∏–π
            "üíº –†–∞–±–æ—Ç–∞",  # –≠–º–æ–¥–∑–∏ + —Ä—É—Å—Å–∫–∏–π
            "Work Tasks",  # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
            "–†–∞–±–æ—Ç–∞",  # –†—É—Å—Å–∫–∏–π
        ]

        for title in test_categories:
            category_data = CategoryCreate(title=title)
            category_service.create_category(
                category_data, multilingual_test_user.user_id
            )

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        search_tests = [
            ("Â∑•‰Ωú", 1),  # –ü–æ–∏—Å–∫ –∫–∏—Ç–∞–π—Å–∫–∏—Ö –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤
            ("‰ªï‰∫ã", 1),  # –ü–æ–∏—Å–∫ —è–ø–æ–Ω—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            ("üíº", 1),  # –ü–æ–∏—Å–∫ –ø–æ —ç–º–æ–¥–∑–∏
            ("Work", 1),  # –ü–æ–∏—Å–∫ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
            ("–†–∞–±–æ—Ç–∞", 2),  # –ü–æ–∏—Å–∫ —Ä—É—Å—Å–∫–æ–≥–æ (–¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ 2: "üíº –†–∞–±–æ—Ç–∞" –∏ "–†–∞–±–æ—Ç–∞")
        ]

        for search_term, expected_count in search_tests:
            found_categories, _ = category_service.search_categories(
                search_term, multilingual_test_user.user_id
            )
            assert (
                len(found_categories) == expected_count
            ), f"–ü–æ–∏—Å–∫ '{search_term}': –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –Ω–∞–π–¥–µ–Ω–æ {len(found_categories)}"

    def test_unicode_preservation(self, category_service, multilingual_test_user):
        """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Unicode —Å–∏–º–≤–æ–ª–æ–≤"""
        unicode_test_cases = [
            ("üåç", "–≠–º–æ–¥–∑–∏ –∑–µ–º–ª—è"),
            ("‰∏≠Êñá", "–ö–∏—Ç–∞–π—Å–∫–∏–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã"),
            ("„Å≤„Çâ„Åå„Å™", "–Ø–ø–æ–Ω—Å–∫–∞—è —Ö–∏—Ä–∞–≥–∞–Ω–∞"),
            ("ÿßŸÑÿπÿ±ÿ®Ÿäÿ©", "–ê—Ä–∞–±—Å–∫–∏–π —Ç–µ–∫—Å—Ç"),
            ("◊¢◊ë◊®◊ô◊™", "–ò–≤—Ä–∏—Ç"),
            ("–†—É—Å—Å–∫–∏–π", "–ö–∏—Ä–∏–ª–ª–∏—Ü–∞"),
            ("‚àë‚àûŒ±", "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã"),
        ]

        for unicode_char, description in unicode_test_cases:
            test_title = f"Test {unicode_char} {description}"
            category_data = CategoryCreate(title=test_title)
            category = category_service.create_category(
                category_data, multilingual_test_user.user_id
            )

            assert category is not None, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç –¥–ª—è: {description}"
            assert (
                category.title == test_title
            ), f"Unicode –∏—Å–∫–∞–∂—ë–Ω –¥–ª—è {description}: –æ–∂–∏–¥–∞–ª–æ—Å—å '{test_title}', –ø–æ–ª—É—á–µ–Ω–æ '{category.title}'"

    def test_long_multilingual_names(self, category_service, multilingual_test_user):
        """–¢–µ—Å—Ç –¥–ª–∏–Ω–Ω—ã—Ö –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π"""
        long_names = [
            "Very Long English Category Name With Multiple Words",  # 51 —Å–∏–º–≤–æ–ª
            "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏",  # 65 —Å–∏–º–≤–æ–ª–æ–≤
            "ÈùûÂ∏∏„Å´Èï∑„ÅÑÊó•Êú¨Ë™û„ÅÆ„Ç´„ÉÜ„Ç¥„É™ÂêçÂâç„Åß„Åô",  # 17 —Å–∏–º–≤–æ–ª–æ–≤
            "ËøôÊòØ‰∏Ä‰∏™ÈùûÂ∏∏ÈïøÁöÑ‰∏≠ÊñáÁ±ªÂà´ÂêçÁß∞",  # 14 —Å–∏–º–≤–æ–ª–æ–≤
            "üìöüéØüíº –°–º–µ—à–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö",  # 59 —Å–∏–º–≤–æ–ª–æ–≤
        ]

        for title in long_names:
            category_data = CategoryCreate(title=title)
            category = category_service.create_category(
                category_data, multilingual_test_user.user_id
            )

            assert (
                category is not None
            ), f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ ({len(title)} —Å–∏–º–≤–æ–ª–æ–≤): '{title}'"
            assert (
                category.title == title
            ), f"–î–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: –æ–∂–∏–¥–∞–ª–æ—Å—å '{title}', –ø–æ–ª—É—á–µ–Ω–æ '{category.title}'"

    def test_multilingual_update(self, category_service, multilingual_test_user):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        original_title = "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
        category_data = CategoryCreate(title=original_title)
        category = category_service.create_category(
            category_data, multilingual_test_user.user_id
        )

        assert category is not None

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ —Å–º–µ—à–∞–Ω–Ω—ã–π –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–π
        new_title = "üîÑ Updated ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ ‚Ä¢ Êõ¥Êñ∞„Åï„Çå„Åü"
        update_data = CategoryUpdate(title=new_title)
        updated_category = category_service.update_category(
            category.category_id, update_data, multilingual_test_user.user_id
        )

        assert updated_category is not None, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
        assert (
            updated_category.title == new_title
        ), f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ: –æ–∂–∏–¥–∞–ª–æ—Å—å '{new_title}', –ø–æ–ª—É—á–µ–Ω–æ '{updated_category.title}'"

    def test_empty_and_whitespace_handling(
        self, category_service, multilingual_test_user
    ):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö –∏ –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π"""
        from pydantic import ValidationError

        # –¢–æ–ª—å–∫–æ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å ValidationError –∏–∑-–∑–∞ min_length=1
        with pytest.raises(ValidationError):
            CategoryCreate(title="")

        # –°—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é Pydantic (min_length=1),
        # –Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
        whitespace_titles = [
            "   ",  # –¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã
            "\t\n",  # –¢–∞–±—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        ]

        for title in whitespace_titles:
            # –≠—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å—Ö–µ–º—ã, –Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã —Å–µ—Ä–≤–∏—Å–æ–º
            category_data = CategoryCreate(title=title)
            category = category_service.create_category(
                category_data, multilingual_test_user.user_id
            )
            # –°–µ—Ä–≤–∏—Å –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å None –¥–ª—è –ø—É—Å—Ç—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
            assert (
                category is None
            ), f"–°–µ—Ä–≤–∏—Å –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø—É—Å—Ç—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º: '{title}'"


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ pytest –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ —Ñ–∞–π–ª–∞
    pytest.main([__file__, "-v"])
