from typing import Any

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

from .config import settings
from .routers import auth, categories, tasks, token, users

# –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
description = """
## Task Manager API

Comprehensive REST API for task management with user authentication and categorization.

### Features:

* **Authentication**: JWT-based authentication system
* **User Management**: User registration, login, and profile management
* **Task Management**: Create, read, update, and delete tasks with filters
* **Categories**: Organize tasks with custom categories
* **Priorities & Status**: Task prioritization and status tracking
* **Search & Filter**: Advanced search and filtering capabilities

### API Sections:

* **Authentication**: Login, logout, and token management
* **Users**: User profile and account management
* **Tasks**: Complete task CRUD operations with filtering
* **Categories**: Task categorization system

### Getting Started:

1. Register a new user account or login with existing credentials
2. Obtain an access token from the `/token` endpoint
3. Use the token in the Authorization header: `Bearer <your_token>`
4. Start managing your tasks and categories

### Security:

All endpoints (except authentication) require a valid JWT token in the Authorization header.
"""

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–µ–≥–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
tags_metadata: list[dict[str, Any]] = [
    {
        "name": "üè† Health & Info",
        "description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ API –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
    },
    {
        "name": "üîê Authentication",
        "description": "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–∞",
        "externalDocs": {
            "description": "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
            "url": "https://fastapi.tiangolo.com/tutorial/security/",
        },
    },
    {
        "name": "üë§ User Registration",
        "description": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    },
    {
        "name": "üë• User Management",
        "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    },
    {
        "name": "üìÅ Categories",
        "description": "–°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∑–∞–¥–∞—á",
    },
    {
        "name": "üìã Tasks",
        "description": "–ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ - —Å–æ–∑–¥–∞–Ω–∏–µ, —á—Ç–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ",
    },
    {
        "name": "üìä Statistics",
        "description": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º",
    },
]

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Task Manager API",
    description=description,
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_tags=tags_metadata,
    contact={
        "name": "Task Manager API Support",
        "url": "https://github.com/xudoyberdi0410/task-manager-api",
    },
    license_info={
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT",
    },
    servers=[
        {"url": "http://localhost:8000", "description": "Development server"},
        {"url": "https://task-manager-api-fntf.onrender.com", "description": "Production server"},
    ],
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è Swagger UI
    swagger_ui_parameters={
        "persistAuthorization": True,
        "displayRequestDuration": True,
        "filter": True,
        "tryItOutEnabled": True,
    },
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.allowed_origins.split(",") if settings.allowed_origins != "*" else ["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏
app.include_router(
    token.router,
    tags=["üîê Authentication"],
    prefix="",
    responses={
        401: {"description": "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"},
        422: {"description": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"},
    },
)

app.include_router(
    auth.router,
    prefix="/auth",
    tags=["üë§ User Registration"],
    responses={
        400: {"description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"},
        422: {"description": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"},
    },
)

app.include_router(
    users.router,
    prefix="/api",
    tags=["üë• User Management"],
    responses={
        401: {"description": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"},
        403: {"description": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"},
        404: {"description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"},
    },
)

app.include_router(
    categories.router,
    prefix="/api",
    tags=["üìÅ Categories"],
    responses={
        401: {"description": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"},
        403: {"description": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"},
        404: {"description": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"},
    },
)

app.include_router(
    tasks.router,
    prefix="/api",
    tags=["üìã Tasks"],
    responses={
        401: {"description": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"},
        403: {"description": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"},
        404: {"description": "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"},
    },
)


@app.get(
    "/",
    summary="API Information",
    description="Get basic information about the Task Manager API, including environment and service status",
    response_description="API information and service status",
    tags=["üè† Health & Info"],
)
async def root():
    """
    ## API Welcome Endpoint

    Returns basic information about the Task Manager API including:
    - Welcome message
    - Current environment
    - Documentation links
    - Service connectivity status
    """
    return {
        "message": "Welcome to Task Manager API",
        "environment": settings.environment,
        "docs": "/docs",
        "redoc": "/redoc",
        "database_connected": True if settings.database_url else False,
    }


@app.get(
    "/health",
    summary="Health Check",
    description="Check if the API is running and accessible",
    response_description="Service health status",
    tags=["üè† Health & Info"],
)
async def health_check():
    """
    ## Health Check Endpoint

    Simple health check to verify the API is running properly.
    Used by monitoring systems and load balancers.
    """
    return {"status": "healthy", "timestamp": "2025-06-25T00:00:00Z"}


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8000)
